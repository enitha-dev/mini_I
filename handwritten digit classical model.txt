handwritten digit classical model

import numpy as np
import pandas as pd
import tensorflow as tf
from matplotlib import pyplot as plt
data = pd.read_csv('D:/datasets/train.csv')
data = np.array(data)
m, n = data.shape
np.random.shuffle(data) 
data_dev = data[0:1000].T
Y_dev = data_dev[0]
X_dev = data_dev[1:n]
X_dev = X_dev / 255.
data_train = data[1000:m].T
Y_train = data_train[0]
X_train = data_train[1:n]
X_train = X_train / 255.
_,m_train = X_train.shape
Y_train

def init_params():
    W1 = np.random.rand(10, 784) - 0.5
    b1 = np.random.rand(10, 1) - 0.5
    W2 = np.random.rand(10, 10) - 0.5
    b2 = np.random.rand(10, 1) - 0.5
    return W1, b1, W2, b2

def ReLU(Z):
    return np.maximum(Z, 0)

def softmax(Z):
    A = np.exp(Z) / sum(np.exp(Z))
    return A
    
def forward_prop(W1, b1, W2, b2, X):
    Z1 = W1.dot(X) + b1
    A1 = ReLU(Z1)
    Z2 = W2.dot(A1) + b2
    A2 = softmax(Z2)
    return Z1, A1, Z2, A2

def ReLU_deriv(Z):
    return Z > 0

def one_hot(Y):
    one_hot_Y = np.zeros((Y.size, Y.max() + 1))
    one_hot_Y[np.arange(Y.size), Y] = 1
    one_hot_Y = one_hot_Y.T
    return one_hot_Y

def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):
    one_hot_Y = one_hot(Y)
    dZ2 = A2 - one_hot_Y
    dW2 = 1 / m * dZ2.dot(A1.T)
    db2 = 1 / m * np.sum(dZ2)
    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)
    dW1 = 1 / m * dZ1.dot(X.T)
    db1 = 1 / m * np.sum(dZ1)
    return dW1, db1, dW2, db2

def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):
    W1 = W1 - alpha * dW1
    b1 = b1 - alpha * db1    
    W2 = W2 - alpha * dW2  
    b2 = b2 - alpha * db2    
    return W1, b1, W2, b2

def get_predictions(A2):
    return np.argmax(A2, 0)

def get_accuracy(predictions, Y):
    #print(predictions, Y)
    return (np.sum(predictions == Y) / Y.size)*100

def gradient_descent(X, Y, alpha, iterations):
    W1, b1, W2, b2 = init_params()
    accuracy_history = []
    loss_history = []
    precision_history = []
    recall_history = []

    for i in range(iterations):
        with tf.device('/device:GPU:0'):
            Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)
            dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)
            W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)

        if i % 10 == 0:
            print("Iteration: ", i)
            predictions = get_predictions(A2)
            accuracy = get_accuracy(predictions, Y)
            print("Accuracy: ", accuracy)
            accuracy_history.append(accuracy)

            loss = compute_loss(A2, Y)
            print("Loss: ", loss)
            loss_history.append(loss)

            confusion_matrix = compute_confusion_matrix(predictions, Y)
            precision, recall = compute_precision_recall(confusion_matrix)
            precision_history.append(precision)
            recall_history.append(recall)

    return W1, b1, W2, b2, accuracy_history, loss_history, precision_history, recall_history

def make_predictions(X, W1, b1, W2, b2):
    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)
    predictions = get_predictions(A2)
    return predictions

def test_prediction(index, W1, b1, W2, b2):
    current_image = X_train[:, index, None]
    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)
    label = Y_train[index]
    print("Prediction: ", prediction)
    print("Label: ", label)
    current_image = current_image.reshape((28, 28)) * 255
    plt.gray()
    plt.imshow(current_image, interpolation='nearest')
    plt.show()

def compute_precision_recall(confusion_matrix):
    precision = np.zeros(confusion_matrix.shape[0])
    recall = np.zeros(confusion_matrix.shape[0])
    for i in range(confusion_matrix.shape[0]):
        tp = confusion_matrix[i, i]
        fp = np.sum(confusion_matrix[:, i]) - tp
        fn = np.sum(confusion_matrix[i, :]) - tp
        precision[i] = tp / (tp + fp) if (tp + fp) != 0 else 0
        recall[i] = tp / (tp + fn) if (tp + fn) != 0 else 0
    return precision, recall

def compute_loss(A2, Y):
    one_hot_Y = one_hot(Y)
    loss = -np.sum(one_hot_Y * np.log(A2)) / Y.size
    return loss

def compute_confusion_matrix(predictions, Y):
    classes = np.unique(Y)
    confusion_matrix = np.zeros((len(classes), len(classes)))
    for i in range(len(classes)):
        for j in range(len(classes)):
            confusion_matrix[i, j] = np.sum((predictions == classes[j]) & (Y == classes[i]))
    return confusion_matrix

W1, b1, W2, b2, accuracy_history, loss_history, precision_history, recall_history = gradient_descent(X_train, Y_train, 0.01, 1500)

test_prediction(0, W1, b1, W2, b2)
test_prediction(1, W1, b1, W2, b2)
test_prediction(2, W1, b1, W2, b2)
test_prediction(3, W1, b1, W2, b2)

dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)

print("Accuracy:",get_accuracy(dev_predictions, Y_dev))


plt.figure()
plt.plot(range(len(accuracy_history)), accuracy_history)
plt.title('Accuracy Function Evolution')
plt.xlabel('Iteration')
plt.ylabel('Accuracy')
plt.show()


plt.figure()
plt.plot(range(len(loss_history)), loss_history)
plt.title('Loss Function Evolution')
plt.xlabel('Iteration')
plt.ylabel('Loss')
plt.show()


plt.figure()
precision_history = np.array(precision_history)
for i in range(precision_history.shape[1]):
    plt.plot(range(len(precision_history)), precision_history[:, i], label=f'Class {i}')
plt.title('Precision Function Evolution')
plt.xlabel('Iteration')
plt.ylabel('Precision')
plt.legend()
plt.show()


plt.figure()
recall_history = np.array(recall_history)
for i in range(recall_history.shape[1]):
    plt.plot(range(len(recall_history)), recall_history[:, i], label=f'Class {i}')
plt.title('Recall Function Evolution')
plt.xlabel('Iteration')
plt.ylabel('Recall')
plt.legend()
plt.show()

dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)
print("Accuracy on dev set:", get_accuracy(dev_predictions, Y_dev))
confusion_matrix = compute_confusion_matrix(dev_predictions, Y_dev)
print("Confusion Matrix:")
print(confusion_matrix)